apply plugin: 'com.android.application'

buildscript {
    repositories {
        mavenCentral()
        google()
        gradlePluginPortal()
        maven { url 'https://plugins.gradle.org/m2' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.3.0'
    }
}

allprojects {
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven { url 'https://plugins.gradle.org/m2' }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '5.6.4'
}

ext {
    apply from: '../CordovaLib/cordova.gradle'
    cdvCompileSdkVersion = null
    cdvBuildToolsVersion = null
    cdvVersionCode = null
    cdvMinSdkVersion = null
    cdvMaxSdkVersion = null
    cdvTargetSdkVersion = null
    cdvBuildMultipleApks = null
    cdvVersionCodeForceAbiDigit = null
    cdvReleaseSigningPropertiesFile = '/home/diego/Documentos/Projetos/DBL/PedMoto/Setup/Client/platforms/android/release-signing.properties'
    cdvDebugSigningPropertiesFile = null
    cdvBuildArch = null
    cdvPluginPostBuildExtras = []
}

apply from: "../cordova-plugin-fcm-with-dependecy-updated/pedmoto-FCMPlugin.gradle"

def hasBuildExtras1 = file('build-extras.gradle').exists()
if (hasBuildExtras1) {
    apply from: 'build-extras.gradle'
}

def hasBuildExtras2 = file('../build-extras.gradle').exists()
if (hasBuildExtras2) {
    apply from: '../build-extras.gradle'
}

ext.cdvCompileSdkVersion = cdvCompileSdkVersion == null ? (
    defaultCompileSdkVersion == null 
        ? privateHelpers.getProjectTarget()
        : defaultCompileSdkVersion 
) : Integer.parseInt('' + cdvCompileSdkVersion)

if (ext.cdvBuildToolsVersion == null) {
    ext.cdvBuildToolsVersion = privateHelpers.findLatestInstalledBuildTools()
}

if (ext.cdvDebugSigningPropertiesFile == null && file('../debug-signing.properties').exists()) {
    ext.cdvDebugSigningPropertiesFile = '../debug-signing.properties'
}

if (ext.cdvReleaseSigningPropertiesFile == null && file('../release-signing.properties').exists()) {
    ext.cdvReleaseSigningPropertiesFile = '../release-signing.properties'
}

ext.cdvBuildMultipleApks = cdvBuildMultipleApks == null ? false : cdvBuildMultipleApks.toBoolean()
ext.cdvVersionCodeForceAbiDigit = cdvVersionCodeForceAbiDigit == null ? false : cdvVersionCodeForceAbiDigit.toBoolean()

ext.cdvMinSdkVersion = cdvMinSdkVersion == null ? defaultMinSdkVersion : Integer.parseInt('' + cdvMinSdkVersion)
if (cdvMaxSdkVersion != null) {
    ext.cdvMaxSdkVersion = Integer.parseInt('' + cdvMaxSdkVersion)
}
ext.cdvTargetSdkVersion = cdvTargetSdkVersion == null ? defaultTargetSdkVersion : Integer.parseInt('' + cdvTargetSdkVersion)
ext.cdvVersionCode = cdvVersionCode == null ? null : Integer.parseInt('' + cdvVersionCode)

def computeBuildTargetName(debugBuild) {
    def ret = 'assemble'
    if (cdvBuildMultipleApks && cdvBuildArch) {
        def arch = cdvBuildArch == 'arm' ? 'armv7' : cdvBuildArch
        ret += '' + arch.toUpperCase().charAt(0) + arch.substring(1)
    }
    return ret + (debugBuild ? 'Debug' : 'Release')
}

task cdvBuildDebug
cdvBuildDebug.dependsOn {
    return computeBuildTargetName(true)
}

task cdvBuildRelease
cdvBuildRelease.dependsOn {
    return computeBuildTargetName(false)
}

task cdvPrintProps {
    doLast {
        println('cdvCompileSdkVersion=' + cdvCompileSdkVersion)
        println('cdvBuildToolsVersion=' + cdvBuildToolsVersion)
        println('cdvVersionCode=' + cdvVersionCode)
        println('cdvVersionCodeForceAbiDigit=' + cdvVersionCodeForceAbiDigit)
        println('cdvMinSdkVersion=' + cdvMinSdkVersion)
        println('cdvMaxSdkVersion=' + cdvMaxSdkVersion)
        println('cdvTargetSdkVersion=' + cdvTargetSdkVersion)
        println('cdvBuildMultipleApks=' + cdvBuildMultipleApks)
        println('cdvReleaseSigningPropertiesFile=' + cdvReleaseSigningPropertiesFile)
        println('cdvDebugSigningPropertiesFile=' + cdvDebugSigningPropertiesFile)
        println('cdvBuildArch=' + cdvBuildArch)
        println('computedVersionCode=' + android.defaultConfig.versionCode)
        android.productFlavors.each { flavor ->
            println('computed' + flavor.name.capitalize() + 'VersionCode=' + flavor.versionCode)
        }
    }
}

android {
    compileSdkVersion cdvCompileSdkVersion ?: 33
    buildToolsVersion cdvBuildToolsVersion ?: privateHelpers.findLatestInstalledBuildTools()

    defaultConfig {
        applicationId privateHelpers.extractStringFromManifest("package")
        versionCode cdvVersionCode ?: new BigInteger("" + privateHelpers.extractIntFromManifest("versionCode"))
        if (cdvMinSdkVersion != null) {
            minSdkVersion cdvMinSdkVersion
        }
        if (cdvMaxSdkVersion != null) {
            maxSdkVersion cdvMaxSdkVersion
        }
        if (cdvTargetSdkVersion != null) {
            targetSdkVersion cdvTargetSdkVersion
        }
    }

    lintOptions {
        abortOnError false
    }

    signingConfigs {
        release {
            storeFile file('/home/diego/Downloads/my-release-key-ORIGINAL.keystore')
            storePassword System.getenv("STORE_PASS") ?: '123diego'
            keyAlias 'Principal'
            keyPassword System.getenv("KEY_PASS") ?: '123diego'
            v2SigningEnabled true
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    if (Boolean.valueOf(cdvBuildMultipleApks)) {
        flavorDimensions "default"
        productFlavors {
            armeabi {
                versionCode defaultConfig.versionCode * 10 + 1
                ndk {
                    abiFilters = ["armeabi"]
                }
            }
            armv7 {
                versionCode defaultConfig.versionCode * 10 + 2
                ndk {
                    abiFilters = ["armeabi-v7a"]
                }
            }
            arm64 {
                versionCode defaultConfig.versionCode * 10 + 3
                ndk {
                    abiFilters = ["arm64-v8a"]
                }
            }
            x86 {
                versionCode defaultConfig.versionCode * 10 + 4
                ndk {
                    abiFilters = ["x86"]
                }
            }
            x86_64 {
                versionCode defaultConfig.versionCode * 10 + 5
                ndk {
                    abiFilters = ["x86_64"]
                }
            }
        }
    } else if (Boolean.valueOf(cdvVersionCodeForceAbiDigit)) {
        defaultConfig {
            versionCode defaultConfig.versionCode * 10
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')
    implementation project(path: ":CordovaLib")
    implementation "androidx.legacy:legacy-support-v4:1.0.0"
    implementation "androidx.annotation:annotation:1.1.0"
}

def addSigningProps(propsFilePath, androidSigningConfigs) {
    if (!file(propsFilePath).exists()) {
        return
    }
    def propsFile = file(propsFilePath)
    def props = new Properties()
    propsFile.withReader { reader ->
        props.load(reader)
    }
    def storeFile = new File(props.get('key.store') ?: privateHelpers.ensureValueExists(propsFilePath, props, 'storeFile'))
    if (!storeFile.isAbsolute()) {
        storeFile = RelativePath.parse(true, storeFile.toString()).getFile(propsFile.getParentFile())
    }
    if (!storeFile.exists()) {
        throw new FileNotFoundException('Keystore file does not exist: ' + storeFile.getAbsolutePath())
    }
    androidSigningConfigs.release.keyAlias = props.get('key.alias') ?: privateHelpers.ensureValueExists(propsFilePath, props, 'keyAlias')
    androidSigningConfigs.release.keyPassword = props.get('keyPassword', props.get('key.alias.password', androidSigningConfigs.release.keyPassword))
    androidSigningConfigs.release.storeFile = storeFile
    androidSigningConfigs.release.storePassword = props.get('storePassword', props.get('key.store.password', androidSigningConfigs.release.storePassword))
    def storeType = props.get('storeType', props.get('key.store.type', ''))
    if (!storeType) {
        def filename = storeFile.getName().toLowerCase()
        if (filename.endsWith('.p12') || filename.endsWith('.pfx')) {
            storeType = 'pkcs12'
        } else {
            storeType = androidSigningConfigs.release.storeType
        }
    }
    androidSigningConfigs.release.storeType = storeType
}

if (cdvReleaseSigningPropertiesFile) {
    addSigningProps(cdvReleaseSigningPropertiesFile, android.signingConfigs)
}

for (def func : cdvPluginPostBuildExtras) {
    func()
}

if (hasProperty('postBuildExtras')) {
    postBuildExtras()
}